Se più thread accedono le stesse locazioni di memoria in lettura/scrittura
    La scrittura da parte di un thread deve essere sincronizzata
    Altrimenti il comportamento del programma è indefinito

Nel caso più semplice anche un join() può bastare
- La variabile è visibile da main thread e figlio
- Il thread figlio modifica la variabile
- Il main thread attende la fine dell'esecuzione del figlio
- A questo punto il main thread può accedere in sicurezza la variabile

Race condition: più thread competono su un dato
- Benigna / problematica 

Lock-Free programming
- Uso di variabili accessibili in maniera atomica
- Vedi classe template std::atomic

Uso di mutex e lock
- Permette di regolamentare l'accesso a una variabili in modo mutualmente esclusivo
- Solo un thread alla volta ha il permesso di accederla
- Tutti gli accessi alla risorsa devono essere mediati dal mutex

Si usa una istanza di std::mutex, che mette a disposizione i metodi:
- lock(), per acquisire la risorsa
- unlock(), per renderla di nuovo disponibile

Sono usati direttamente solo in casi molto semplici
- Quando è facile tenere sotto controllo il flusso di esecuzione
- Esempio, simulazione di un metodo start per un thread
