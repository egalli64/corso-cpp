2.1 Tipi standard

Come in C, anche in C++ i tipi di dati possono avere dimensioni diverse a seconda della piattaforma usata
L'operatore sizeof() ci dà la dimensione in byte del tipo o della variabile a cui viene applicato

# Booleano
bool: false o true 

# Singolo carattere
char: 'a', '7', '@', ... 

# Numerici interi, possono essere signed (default) o unsigned
Da C++14 è possibile usare un apice per rendere più leggibili i numeri, es.: 123'456

short
int <- uso comune
long
long long

# Numerici reali (floating point), hanno sempre il segno

float
double <- uso comune
long double

# Stringhe

In C non esiste il tipo stringa, che viene reso con un array di caratteri terminato da '\0'
In C++ normalmente si usa la classe std::string
    In entrambi i casi, le stringhe letterali sono rappresentate tra doppi apici, es: "Hello" 

# Inizializzazione di una variabile
= operatore di assegnamento, converte implicitamente il valore, se richiesto
{} inizializzatore uniforme, preferito da C++11

# Operatori artimetici
Binari +, -, *, /, %
    In caso di operandi di diverso tipo, il compilatore converte il più "piccolo" al più "grande"
    La divisione può essere intera o reale, dipende dagli operandi
Unari +, -

# Overload dell'operatore + per std::string
Concatenazione tra stringhe

# Operatori di confronto
==, !=, <, <=, >, >=

# Operatori logici
!, &&, ||

# Operatori orientati al bit (su unsigned!)
&, |, ^, ~

# Altri operatori di assegnamento
+=, -=, ..., ++, --

# Cast esplicito via static_cast<type>()
Altri cast in C++
    const_cast - rimuove o aggiunge il const a una variabile
    dynamic_cast - per l'uso all'interno di una gerarchia
    reinterpret_cast - assegna un nuovo senso ai byte correlati
Il cast C-style (type) corrisponde al reinterpret_cast<type>() del C++ (sconsigliati)

# La conversione tra tipi numerici e stringa richiede l'uso di funzioni, ad es:
- std::stoi() // string to int
- std::stod() // string to double
- std::to_string() // numeric to string

# Da C++11 si può al compilatore la deduzione del tipo, via keyword "auto"
Errore solo in caso di ambiguità o mancanza di informazioni

# Costanti
constexpr: C++11, è possibile valutare il valore durante la compilazione
const: la variabile non deve essere modificata

# Enumerazioni
enum: ereditati dal C, un nome con assegnato un valore int
    enum { <ENUM_VALUE> [= N]  [, ...] }
    es: enum { SAT = 0, SUN };
        cout << ALPHA;
    per default i valori assegnati agli enum vanno da zero in su
enum class: C++11, hanno uno scope e un tipo proprio
    enum class <EnumName> [: integral_type] { <ENUM_VALUE> [= N]  [, ...] }
    es: enum class WeekendDay : bool { SAT = 0, SUN };
        cout << static_cast<int>(GreekLetter::ALPHA);
    per default l'integral_type di riferimento per una enum class è int
