6.2 Polimorfismo, tabella dei metodi virtuali (vtbl): virtual, override

Metodo virtuale
    definito in una classe base
    ridefinito in una classe figlia
        override: esattamente la stessa signature
        diverso da overload, stesso nome, diversa lista di parametri
    Solo metodi di istanza (non statici) possono essere virtuali
        Neanche i ctor _non_ possono essere virtuali
        Se c'è bisogno di un virtual ctor, occorre implementarlo con un metodo apposito
            Spesso chiamato clone() che ritorna un puntatore all'oggetto creato
            Vedi anche il design pattern Factory Method
        I dtor possono essere virtuali, vedi più avanti

Puntatori ai metodi virtuali sono inseriti in una tabella, detta vtbl
    Che permette di decidere dinamicamente, a run-time, quale metodo invocare
    Verificando attraverso la vtbl qual sia la definizione corretta
Meccanismo che determina un (piccolo) overhead in esecuzione
    Per questo motivo, quando necessario, va esplicitamente abilitato

Un metodo è virtuale se è identificato dalla keyword "virtual"
    o se ridefinisce un metodo virtuale
Per segnalare al compilatore (e a chi legge il codice) che un metodo è un override
    si può identificarlo con la keyword "override", alla fine della signature

Dal body di un metodo override è possibile invocare quel metodo nella versione della classe base
    Uso dell'operatore di risoluzione di scope ::
    Ad es. Base::method();
    Non specificando la classe di appartenenza, si sottointende una chiamata ricorsiva

Un puntatore a una classe base funziona in modo polimorfico
- può essere associato ad un oggetto di tutta gerarchia
- l'invocazione di un metodo, a run-time, tiene conto del tipo effettivo dell'oggetto

Una variabile di classe derivata viene trattata come se fosse di classe base
- Fenomeno dello "slicing"
