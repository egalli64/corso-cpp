/*
 * b4_select_cursor.pc / cpp
 *
 * select by cursor
 *
 * To precompile run: proc code=cpp b4_select_cursor.pc
 */

#include <iostream>
#include "hron.h"
#include "b4_select_cursor.h"

EXEC SQL BEGIN DECLARE SECTION;

static const char* connection_string = HRON_CONNECTION;

const int STREET_ADDRESS_LEN = 40;
typedef char StreetAddress[STREET_ADDRESS_LEN + 1];
EXEC SQL TYPE StreetAddress IS STRING(CITY_LEN + 1) REFERENCE;

const int CITY_LEN = 30;
typedef char City[CITY_LEN + 1];
EXEC SQL TYPE City IS STRING(CITY_LEN + 1) REFERENCE;

const int STATE_PROVINCE_LEN = 25;
typedef char StateProvince[STATE_PROVINCE_LEN + 1];
EXEC SQL TYPE StateProvince IS STRING(STATE_PROVINCE_LEN + 1) REFERENCE;

static struct Location {
	int location_id;
	StreetAddress street_address;
	City city;
	StateProvince state_province;
} location;

struct Location* pLocation = &location;

EXEC SQL END DECLARE SECTION;

#define SQLCA_STORAGE_CLASS extern
EXEC SQL INCLUDE sqlca;

void select_locations() {
	EXEC SQL CONNECT :connection_string;
	if(sqlca.sqlcode != 0) {
		std::cout << "error " << sqlca.sqlerrm.sqlerrmc << '\n';
		return;
	}

	EXEC SQL DECLARE locations CURSOR FOR 
		SELECT location_id, street_address, city, state_province
		FROM location
		WHERE country_id = 'US'; 

	EXEC SQL OPEN locations;

	EXEC SQL WHENEVER NOT FOUND DO break; 
    for (;;) {
        EXEC SQL FETCH locations INTO :pLocation;

		std::cout << location.location_id << ": ";
		std::cout << location.street_address << " - ";
		std::cout << location.city;
		std::cout << " [" << location.state_province << ']' << '\n';
    } 
 
    EXEC SQL CLOSE locations; 

	EXEC SQL COMMIT WORK RELEASE;
}
