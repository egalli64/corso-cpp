/*
 * b2_select.pc / cpp
 *
 * Oracle DB select many
 *
 * To precompile run: proc code=cpp b2_select.pc
 */

#include <iostream>
#include "hron.h"
#include "b2_select.h"

EXEC SQL BEGIN DECLARE SECTION;

static const char* connection_string = HRON_CONNECTION;

static int location_id;

const int STREET_ADDRESS_LEN = 40;
typedef char StreetAddress[STREET_ADDRESS_LEN + 1];
EXEC SQL TYPE StreetAddress IS STRING(CITY_LEN + 1) REFERENCE;

const int CITY_LEN = 30;
typedef char City[CITY_LEN + 1];
EXEC SQL TYPE City IS STRING(CITY_LEN + 1) REFERENCE;

const int COUNTRY_ID_LEN = 2;
typedef char CountryId[COUNTRY_ID_LEN + 1];
EXEC SQL TYPE CountryId IS STRING(COUNTRY_ID_LEN + 1) REFERENCE;

static struct Location {
	StreetAddress street_address;
	City city;
	CountryId country_id;
} location;

EXEC SQL END DECLARE SECTION;

#define SQLCA_STORAGE_CLASS extern
EXEC SQL INCLUDE sqlca;

void select_locations_from(int id) {
	EXEC SQL CONNECT :connection_string;
	if(sqlca.sqlcode != 0) {
		std::cout << "error " << sqlca.sqlerrm.sqlerrmc << '\n';
		return;
	}

	location_id = id;
	while(true) {
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL SELECT street_address, city, country_id
			INTO :location
			FROM location
			WHERE location_id = :location_id;

		if(sqlca.sqlcode != 0) {
			std::cout << "error " << sqlca.sqlerrm.sqlerrmc << '\n';
		} else {
			std::cout << location_id << ": "
				<< location.street_address << ", "
				<< location.city << " - "
				<< location.country_id << '\n';
		}

		location_id += 100;
	}

	EXEC SQL COMMIT WORK RELEASE;
}
