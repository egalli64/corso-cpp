/*
 * b3_select.pc / cpp
 *
 * select into - indicator
 *
 * To precompile run: proc code=cpp b3_select.pc
 */

#include <iostream>
#include "hron.h"
#include "b3_select.h"

EXEC SQL BEGIN DECLARE SECTION;

static const char* connection_string = HRON_CONNECTION;

static int location_id;

const int STREET_ADDRESS_LEN = 40;
typedef char StreetAddress[STREET_ADDRESS_LEN + 1];
EXEC SQL TYPE StreetAddress IS STRING(CITY_LEN + 1) REFERENCE;

const int CITY_LEN = 30;
typedef char City[CITY_LEN + 1];
EXEC SQL TYPE City IS STRING(CITY_LEN + 1) REFERENCE;

const int STATE_PROVINCE_LEN = 25;
typedef char StateProvince[STATE_PROVINCE_LEN + 1];
EXEC SQL TYPE StateProvince IS STRING(STATE_PROVINCE_LEN + 1) REFERENCE;

const int COUNTRY_ID_LEN = 2;
typedef char CountryId[COUNTRY_ID_LEN + 1];
EXEC SQL TYPE CountryId IS STRING(COUNTRY_ID_LEN + 1) REFERENCE;

static struct Location {
	StreetAddress street_address;
	City city;
	StateProvince state_province;
	CountryId country_id;
} location;

static struct LocationIndicator {
	short street_address;
	short city;
	short state_province;
	short country_id;
} indicator;

EXEC SQL END DECLARE SECTION;

#define SQLCA_STORAGE_CLASS extern
EXEC SQL INCLUDE sqlca;

void select_locations_null_from(int id) {
	EXEC SQL CONNECT :connection_string;
	if(sqlca.sqlcode != 0) {
		std::cout << "error " << sqlca.sqlerrm.sqlerrmc << '\n';
		return;
	}

	location_id = id;
	while(true) {
		EXEC SQL WHENEVER NOT FOUND DO break;
		EXEC SQL SELECT street_address, city, state_province, country_id
			INTO :location INDICATOR :indicator
			FROM location
			WHERE location_id = :location_id;

		if(sqlca.sqlcode != 0) {
			std::cout << "error " << sqlca.sqlerrm.sqlerrmc << '\n';
		} else {
			if(indicator.state_province == -1) {
				location.state_province[0] = '-';
				location.state_province[1] = '\0';
			}
			std::cout << location_id << ": "
				<< location.street_address << ", "
				<< location.city << " ("<< location.state_province << ") "
				<< location.country_id << '\n';
		}

		location_id += 100;
	}

	EXEC SQL COMMIT WORK RELEASE;
}
